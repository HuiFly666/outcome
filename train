def train(model, train_loader, epoch, optimizer, metrics_history):
    model.train()  # 设置模型为训练模式
    running_loss = 0.0
    correct = 0  # 用于计算训练准确率
    total = 0    # 总样本数

    for batch_idx, (data, targets) in enumerate(train_loader):
        # 将数据和目标转移到设备
        data, targets = data.to(device), targets.to(device).float()  # 确保目标是浮点数

        # 初始化隐藏状态
        hidden = model.init_hidden(data.size(0))

        # 清零梯度
        optimizer.zero_grad()

        # 前向传播
        outputs, hidden = model(data, hidden)

        # 计算损失
        loss = criterion(outputs, targets.unsqueeze(1))  # 添加一个维度以匹配输出形状

        # 反向传播和优化
        loss.backward()
        optimizer.step()

        # 累加损失
        running_loss += loss.item()

        # 计算准确率
        predicted = (outputs >= 0.5).float()  # 阈值 0.5，将输出转为0或1
        total += targets.size(0)
        correct += (predicted.squeeze() == targets).sum().item()

        # 输出每个 epoch 的损失
        if batch_idx % 10 == 0:  # 每 10 个 batch 打印一次
            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{batch_idx}/{len(train_loader)}], Loss: {loss.item():.4f}')

    # 计算平均损失
    average_loss = running_loss / len(train_loader)
    
    # 计算准确率
    accuracy = 100 * correct / total

    # 将损失和准确率保存到 metrics_history 中
    metrics_history['train_loss'].append(average_loss)
    metrics_history['train_accuracy'].append(accuracy)

    print(f'Epoch [{epoch+1}/{num_epochs}] - Average Loss: {average_loss:.4f}, Accuracy: {accuracy:.2f}%')

    return average_loss, accuracy  # 返回平均损失和准确率
